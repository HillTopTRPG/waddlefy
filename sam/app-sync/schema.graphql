# noinspection GraphQLUnresolvedReference,GraphQLMissingType

type Mutation {
  # ユーザーサインアップ
  userSignUp(input: UserSignUpInput): UserForUser
  # ユーザーサインイン
  userSignIn(input: UserSignInInput): UserForUser
  # ダッシュボード作成
  addDashboard(input: AddDashboardInput): DashboardForUser
  # 参加者作成
  addPlayerByUser(input: AddPlayerByUserInput): IdNameStatus
  addPlayerByPlayer(input: AddPlayerByPlayerInput): IdNameStatus
  # 参加者サインイン（初回）
  playerFirstSignIn(input: PlayerSignInInput): PlayerForPlayer
  # 参加者サインイン
  playerSignIn(input: PlayerSignInInput): PlayerForPlayer
  # 参加者リセットコード生成
  generatePlayerResetCode(input: RequestPlayerPasswordResetInput): RequestPlayerPasswordResetResult
  # 参加者パスワードリセット
  resetPlayerPassword(input: ResetPlayerPasswordInput): PlayerForPlayer
}

type Query {
  # for Unauthorized User
  checkDuplicateUserId(id: String!): CheckResult
  # for Authorized User
  directDashboardAccess(id: String!): DashboardForUser
  # for Unauthorized Player
  getDashboardPlayer(id: String!): IdNameStatus
  getDashboardPlayers: [IdNameStatus]
  # for Authorized Player
  directPlayerAccess: PlayerForPlayer
}

type Subscription {
  onAddPlayer: IdNameStatus
    @aws_subscribe(mutations: ["addPlayerByUser", "addPlayerByPlayer"])
}

type IdNameStatus {
  id: ID!
  name: String!
  status: String!
}

type CheckResult {
  ok: Boolean!
}

# UserLogin
input UserSignUpInput {
  userId: String!
  name: String!
  password: String!
  dashboardName: String!
  layout: String!
  metaData: String!
}

input UserSignInInput {
  userId: String!
  password: String!
}

type UserForUser {
  id: ID!
  name: String!
  token: String!
  secret: String!
  firstDashboard: DashboardForUser
  dashboards: [IdName]!
}

type IdName {
  id: ID!
  name: String!
}

# Player
input AddPlayerByUserInput {
  dashboardId: String!
  name: String!
}

input AddPlayerByPlayerInput {
  name: String!
  password: String!
}

input PlayerSignUpInput {
  name: String!
  password: String!
}

input PlayerSignInInput {
  playerId: String!
  password: String!
}

type PlayerForPlayer {
  id: ID!
  name: String!
  token: String!
  secret: String!
  dashboard: DashboardForPlayer
}

type DashboardForUser {
  id: ID!
  token: String!
  signUpToken: String!
  name: String!
  layout: String!
  metaData: String!
  createdAt: AWSTimestamp!
  user: UserForUser!
  players: [IdNameStatus]!
  panes: [Pane]!
}

type DashboardForPlayer {
  id: ID!
  name: String!
  token: String!
  layout: String!
  metaData: String!
  createdAt: AWSTimestamp!
  user: IdName!
  players: [IdNameStatus]!
  panes: [Pane]!
}

# ダッシュボード
input AddDashboardInput {
  name: String!
  layout: String!
  metaData: String!
}

# Playerパスワードリセット要求
input RequestPlayerPasswordResetInput {
  id: String!
}

type RequestPlayerPasswordResetResult {
  resetCode: String!
}

# Playerパスワードリセット実施
input ResetPlayerPasswordInput {
  id: String!
  resetCode: String!
  password: String!
}

type Pane {
  id: ID!
  type: String!
  data: String! # json
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
