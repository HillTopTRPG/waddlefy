# noinspection GraphQLUnresolvedReference,GraphQLMissingType

schema {
  mutation: Mutation
  subscription: Subscription
  query: Query
}

type Mutation {
  # 追加・認証系

  # ユーザーサインアップ
  userSignUp(input: UserSignUpInput): UserForUser
  # ユーザーサインイン
  userSignIn(input: UserSignInInput): UserForUser
  # ダッシュボード作成
  addDashboard(input: AddDashboardInput): DashboardForUser
  # 参加者作成
  addPlayerByUser(input: AddPlayerByUserInput): AbstractPlayer
  addPlayerByPlayer(input: AddPlayerByPlayerInput): AbstractPlayer
  # 参加者サインイン（初回）
  playerFirstSignIn(input: PlayerSignInInput): PlayerForPlayer
  # 参加者サインイン
  playerSignIn(input: PlayerSignInInput): PlayerForPlayer
  # 参加者リセットコード生成
  generatePlayerResetCode(input: RequestPlayerPasswordResetInput): RequestPlayerPasswordResetResult
  # 参加者パスワードリセット
  resetPlayerPassword(input: ResetPlayerPasswordInput): PlayerForPlayer

  # 更新系

  # ユーザー情報更新
  updateUserName(input: NameInput): AbstractUser
  updateUserIcon: AbstractUser
  # ダッシュボード情報更新
  updateDashboard(input: UpdateDashboardInput): UpdatedDashboard
  # 参加者情報更新
  updatePlayerName(input: NameInput): AbstractPlayer
  updatePlayerIcon: AbstractPlayer

  # 削除系

  # ダッシュボード削除
  deleteDashboard(input: DeleteDashboardInput): DeletedId
  # 参加者削除
  deletePlayer(input: DeletePlayerInput): DeletedId
}

type Subscription {
  # 追加系
  onAddPlayer(dashboardId: String!): AbstractPlayer
  @aws_subscribe(mutations: ["addPlayerByUser", "addPlayerByPlayer"])

  # 更新系
  onUpdateUser(id: String!): AbstractUser
  @aws_subscribe(mutations: ["updateUserName", "updateUserIcon"])
  onUpdateDashboard(id: String!): UpdatedDashboard
  @aws_subscribe(mutations: ["updateDashboard"])
  onUpdatePlayer(dashboardId: String!): AbstractPlayer
  @aws_subscribe(mutations: ["updatePlayerName", "updatePlayerIcon"])

  # 削除系
  onDeletePlayer(dashboardId: String!): DeletedId
  @aws_subscribe(mutations: ["deletePlayer"])
}

type Query {
  # for Unauthorized User
  checkDuplicateUserId(id: String!): CheckResult
  # for Authorized User
  directDashboardAccess(id: String!): DashboardForUser
  # for Unauthorized Player
  getDashboardPlayer(id: String!): AbstractPlayer
  getDashboardPlayers: [AbstractPlayer]
  # for Authorized Player
  directPlayerAccess: PlayerForPlayer
}

###############################
# Input系

input UserSignUpInput {
  userId: String!
  name: String!
  password: String!
  dashboardName: String!
  layout: String!
  metaData: String!
}

input UserSignInInput {
  userId: String!
  password: String!
}

input AddDashboardInput {
  name: String!
  layout: String!
  metaData: String!
}
input AddPlayerByUserInput {
  dashboardId: String!
  name: String!
}

input AddPlayerByPlayerInput {
  name: String!
  password: String!
}

input PlayerSignInInput {
  playerId: String!
  password: String!
}

input RequestPlayerPasswordResetInput {
  id: String!
}

input ResetPlayerPasswordInput {
  id: String!
  resetCode: String!
  password: String!
}

input NameInput {
  name: String!
}

input UpdateDashboardInput {
  dashboardId: String!
  name: String!
  layout: String!
  metaData: String!
}

input DeleteDashboardInput {
  id: String!
}

input DeletePlayerInput {
  id: String!
}

###############################
# 戻り値系

type UserForUser {
  id: ID!
  name: String!
  iconToken: String!
  token: String!
  secret: String!
  firstDashboard: DashboardForUser
  dashboards: [AbstractDashboard]!
}

type DashboardForUser {
  id: ID!
  token: String!
  signUpToken: String!
  name: String!
  layout: String!
  metaData: String!
  createdAt: AWSTimestamp!
  user: UserForUser!
  players: [AbstractPlayer]!
  panes: [Pane]!
}

type AbstractPlayer {
  id: ID!
  dashboardId: String!
  name: String!
  status: String!
  iconToken: String!
}

type PlayerForPlayer {
  id: ID!
  dashboardId: String!
  name: String!
  iconToken: String!
  token: String!
  secret: String!
  dashboard: DashboardForPlayer
}

type RequestPlayerPasswordResetResult {
  resetCode: String!
}

type AbstractUser {
  id: ID!
  name: String!
  iconToken: String!
}

type UpdatedDashboard {
  id: ID!
  name: String!
  token: String!
  layout: String!
  metaData: String!
}

type DeletedId {
  id: ID!
  dashboardId: String!
}

type CheckResult {
  ok: Boolean!
}

type AbstractDashboard {
  id: ID!
  name: String!
}

type DashboardForPlayer {
  id: ID!
  name: String!
  token: String!
  layout: String!
  metaData: String!
  createdAt: AWSTimestamp!
  user: AbstractUser!
  players: [AbstractPlayer]!
  panes: [Pane]!
}

type Pane {
  id: ID!
  type: String!
  data: String! # json
}
