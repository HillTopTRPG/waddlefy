# noinspection GraphQLUnresolvedReference,GraphQLMissingType

schema {
  mutation: Mutation
  subscription: Subscription
  query: Query
}

type Mutation {
  # 追加・認証系

  # ユーザーサインアップ
  userSignUp(input: UserSignUpInput): UserForUser
  # ユーザーサインイン
  userSignIn(input: UserSignInInput): UserForUser
  # セッション作成
  addSession(input: AddSessionInput): SessionForUser
  # ダッシュボード作成
  addDashboard(input: AddDashboardInput): Dashboard
  # 参加者作成
  addPlayerByUser(input: AddPlayerByUserInput): AbstractPlayer
  addPlayerByPlayer(input: AddPlayerByPlayerInput): AbstractPlayer
  # 参加者サインイン（初回）
  playerFirstSignIn(input: PlayerSignInInput): PlayerForPlayer
  # 参加者サインイン
  playerSignIn(input: PlayerSignInInput): PlayerForPlayer
  # 参加者リセットコード生成
  generatePlayerResetCode(input: RequestPlayerPasswordResetInput): RequestPlayerPasswordResetResult
  # 参加者パスワードリセット
  resetPlayerPassword(input: ResetPlayerPasswordInput): PlayerForPlayer

  # 更新系

  # ユーザー情報更新
  updateUserName(input: NameInput): AbstractUser
  updateUserIcon: AbstractUser
  # セッション情報更新
  updateSession(input: UpdateSessionInput): UpdatedSession
  # ダッシュボード情報更新
  updateDashboard(input: UpdateDashboardInput): UpdatedDashboard
  # 参加者情報更新
  updatePlayerName(input: NameInput): AbstractPlayer
  updatePlayerIcon: AbstractPlayer

  # 削除系

  # セッション削除
  deleteSession(input: DeleteSessionInput): DeletedId
  # ダッシュボード削除
  deleteDashboard(input: DeleteDashboardInput): DeletedId
  # 参加者削除
  deletePlayer(input: DeletePlayerInput): DeletedId
}

type Subscription {
  # 追加系
  onAddPlayer(sessionId: String!): AbstractPlayer
  @aws_subscribe(mutations: ["addPlayerByUser", "addPlayerByPlayer"])
  onAddDashboard(sessionId: String!): Dashboard
  @aws_subscribe(mutations: ["addDashboard"])

  # 更新系
  onUpdateUser(id: String!): AbstractUser
  @aws_subscribe(mutations: ["updateUserName", "updateUserIcon"])
  onUpdateSession(id: String!): UpdatedSession
  @aws_subscribe(mutations: ["updateSession"])
  onUpdateDashboard(sessionId: String!): UpdatedDashboard
  @aws_subscribe(mutations: ["updateDashboard"])
  onUpdatePlayer(sessionId: String!): AbstractPlayer
  @aws_subscribe(mutations: ["updatePlayerName", "updatePlayerIcon"])

  # 削除系
  onDeleteDashboard(sessionId: String!): DeletedId
  @aws_subscribe(mutations: ["deleteDashboard"])
  onDeletePlayer(sessionId: String!): DeletedId
  @aws_subscribe(mutations: ["deletePlayer"])
}

type Query {
  # for Unauthorized User
  checkDuplicateUserId(id: String!): CheckResult
  # for Authorized User
  directSessionAccess(id: String!): SessionForUser
  # for Unauthorized Player
  getSessionPlayer(id: String!): AbstractPlayer
  getSessionPlayers: [AbstractPlayer]
  # for Authorized Player
  directPlayerAccess: PlayerForPlayer
  # for Authorized User/Player
  directDashboardAccess(id: String!): Dashboard
}

###############################
# Input系

input UserSignUpInput {
  userId: String!
  name: String!
  password: String!
  sessionName: String!
  sessionType: String!
}

input UserSignInInput {
  userId: String!
  password: String!
}

input AddSessionInput {
  name: String!
  sessionType: String!
}

input AddDashboardInput {
  name: String!
  layout: String! #json
  sessionId: String!
}

input AddPlayerByUserInput {
  sessionId: String!
  name: String!
}

input AddPlayerByPlayerInput {
  name: String!
  password: String!
}

input PlayerSignInInput {
  playerId: String!
  password: String!
}

input RequestPlayerPasswordResetInput {
  id: String!
}

input ResetPlayerPasswordInput {
  id: String!
  resetCode: String!
  password: String!
}

input NameInput {
  name: String!
}

input UpdateSessionInput {
  sessionId: String!
  name: String!
  defaultDashboardId: String!
  sessionType: String!
}

input UpdateDashboardInput {
  sessionId: String!
  dashboardId: String!
  name: String!
  layout: String!
}

input DeleteSessionInput {
  id: String!
}

input DeleteDashboardInput {
  sessionId: String!
  id: String!
}

input DeletePlayerInput {
  id: String!
}

###############################
# 戻り値系

type UserForUser {
  id: ID!
  name: String!
  iconToken: String!
  token: String!
  secret: String!
  firstSession: SessionForUser
  sessions: [AbstractSession]!
}

type SessionForUser {
  id: ID!
  token: String!
  signUpToken: String!
  name: String!
  sessionType: String!
  createdAt: AWSTimestamp!
  user: UserForUser!
  players: [AbstractPlayer]!
  dashboards: [Dashboard]!
  defaultDashboardId: String!
  defaultDashboard: Dashboard
}

type AbstractPlayer {
  id: ID!
  sessionId: String!
  name: String!
  status: String!
  iconToken: String!
}

type PlayerForPlayer {
  id: ID!
  sessionId: String!
  name: String!
  iconToken: String!
  token: String!
  secret: String!
  session: SessionForPlayer
}

type RequestPlayerPasswordResetResult {
  resetCode: String!
}

type AbstractUser {
  id: ID!
  name: String!
  iconToken: String!
}

type UpdatedSession {
  id: ID!
  name: String!
  token: String!
  sessionType: String!
}

type UpdatedDashboard {
  id: ID!
  name: String!
  layout: String!
  sessionId: String!
}

type DeletedId {
  id: ID!
  sessionId: String!
}

type CheckResult {
  ok: Boolean!
}

type AbstractSession {
  id: ID!
  name: String!
}

type SessionForPlayer {
  id: ID!
  name: String!
  token: String!
  sessionType: String!
  createdAt: AWSTimestamp!
  user: AbstractUser!
  players: [AbstractPlayer]!
  dashboards: [AbstractDashboard]!
  defaultDashboardId: String!
  defaultDashboard: Dashboard
}

type AbstractDashboard {
  id: ID!
  name: String!
}

type Dashboard {
  id: ID!
  sessionId: String!
  name: String!
  layout: String! #json
}
