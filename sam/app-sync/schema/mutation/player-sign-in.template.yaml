AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Waddlefy AppSync Mutation playerSignIn

Parameters:
  ApiId:
    Type: String
  DashboardTableDataSourceName:
    Type: String
  PlayerTableDataSourceName:
    Type: String

Resources:
  PlayerSignInMutationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: playerSignIn
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt VerifyPlayerPasswordFunction.FunctionId
          - !GetAtt UpdatePlayerBySignInFunction.FunctionId
      RequestMappingTemplate: '{}'
      ResponseMappingTemplateS3Location: ../vtl/return-stash-player.vm

  VerifyPlayerPasswordFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !Ref ApiId
      Name: verify_player_password_function
      DataSourceName: !Ref PlayerTableDataSourceName
      FunctionVersion: 2018-05-29
      RequestMappingTemplateS3Location: ../vtl/get-item-where-id-input-player-id.vm
      ResponseMappingTemplate: |
        #if($ctx.result && $ctx.result.error)
          $util.error($ctx.result.error)
        #end
        #set($flg = !$util.isNull($ctx.result))
        $util.validate($flg, "No such player")
        #set($flg = $ctx.result.status == "normal")
        $util.validate($flg, "Invalid operation")
        #set($flg = $ctx.result.password == $ctx.args.input.password)
        $util.validate($flg, "Unmatched player password.")
        $util.qr($ctx.stash.put("id", $ctx.result.id))
        {}

  UpdatePlayerBySignInFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !Ref ApiId
      Name: update_player_by_sign_in_function
      DataSourceName: !Ref PlayerTableDataSourceName
      FunctionVersion: 2018-05-29
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "id" : $util.dynamodb.toDynamoDBJson($ctx.stash.id)
          },
          "update" : {
            "expression" : "SET #lastLoggedIn = :lastLoggedIn, #status = :status",
            "expressionNames" : {
              "#lastLoggedIn" : "lastLoggedIn",
              "#status" : "status",
            },
            "expressionValues" : {
              ":lastLoggedIn" : $util.dynamodb.toDynamoDBJson($util.time.nowEpochSeconds()),
              ":status" : $util.dynamodb.toDynamoDBJson("normal")
            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.result && $ctx.result.error)
          $util.error($ctx.result.error)
        #end
        $util.qr($ctx.stash.put("player", $ctx.result))
        {}
