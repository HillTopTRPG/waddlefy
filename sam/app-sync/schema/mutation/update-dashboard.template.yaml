AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Waddlefy AppSync Mutation updateSession

Parameters:
  ApiId:
    Type: String
  GetSessionInputFunctionId:
    Type: String
  DashboardTableDataSourceName:
    Type: String

Resources:
  UpdateDashboardMutationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateDashboard
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !Ref GetSessionInputFunctionId
          - !GetAtt CheckDashboardFunction.FunctionId
          - !GetAtt UpdateDashboardFunction.FunctionId
      RequestMappingTemplate: '{}'
      ResponseMappingTemplateS3Location: ../vtl/return-stash-result.vm

  CheckDashboardFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !Ref ApiId
      Name: check_dashboard_function
      DataSourceName: !Ref DashboardTableDataSourceName
      FunctionVersion: 2018-05-29
      RequestMappingTemplateS3Location: ../vtl/get-item-where-id-input-dashboard-id.vm
      ResponseMappingTemplate: |
        #if($ctx.result && $ctx.result.error)
          $util.error($ctx.result.error)
        #end
        #set($flg = !$util.isNull($ctx.result))
        $util.validate($flg, 'No such dashboard')
        $util.qr($ctx.stash.put("dashboard", $ctx.result))
        #set($flg = $ctx.stash.dashboard.sessionId == $ctx.stash.session.id)
        $util.validate($flg, 'Un match session id')
        {}

  UpdateDashboardFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !Ref ApiId
      Name: update_dashboard_function
      DataSourceName: !Ref DashboardTableDataSourceName
      FunctionVersion: 2018-05-29
      RequestMappingTemplate: |
        {
          "version": "2018-05-29",
          "operation": "UpdateItem",
          "key": {
            "id" : $util.dynamodb.toDynamoDBJson($ctx.args.input.dashboardId)
          },
          "update" : {
            "expression" : "SET #name = :name, #layout = :layout, #option = :option",
            "expressionNames" : {
              "#name" : "name",
              "#layout" : "layout",
              "#option" : "option",
            },
            "expressionValues" : {
              ":name" : $util.dynamodb.toDynamoDBJson($ctx.args.input.name),
              ":layout" : $util.dynamodb.toDynamoDBJson($ctx.args.input.layout),
              ":option" : $util.dynamodb.toDynamoDBJson($ctx.args.input.option),
            }
          }
        }
      ResponseMappingTemplate: |
        #if($ctx.result && $ctx.result.error)
          $util.error($ctx.result.error)
        #end
        #set($ctx.result.sessionId = $ctx.stash.session.id)
        $util.qr($ctx.stash.put("result", $ctx.result))
        {}
