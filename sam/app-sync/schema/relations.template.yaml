AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Waddlefy schema relations

Parameters:
  ApiId:
    Type: String
  UserTableDataSourceName:
    Type: String
  SessionTableDataSourceName:
    Type: String
  PlayerTableDataSourceName:
    Type: String
  DashboardTableDataSourceName:
    Type: String
  SessionDataTableDataSourceName:
    Type: String

Resources:
  # UserForUser.firstSession
  RelationUserForUserFirstSession:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: UserForUser
      FieldName: firstSession
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt QueryFirstSessionIdFunction.FunctionId
          - !GetAtt GetSessionStashFunction.FunctionId
      RequestMappingTemplate: '{}'
      ResponseMappingTemplateS3Location: vtl/return-stash-session.vm

  QueryFirstSessionIdFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !Ref ApiId
      Name: query_first_session_id_function
      DataSourceName: !Ref SessionTableDataSourceName
      FunctionVersion: 2018-05-29
      RequestMappingTemplateS3Location: vtl/query-where-user-id-source-id.vm
      ResponseMappingTemplate: |
        #if($ctx.result && $ctx.result.error)
          $util.error($ctx.result.error)
        #end
        #set($flg = $ctx.result.items.size() > 0)
        $util.validate($flg, "No such Session")
        $util.qr($ctx.stash.put("sessionId", $ctx.result.items[0].id))
        {}

  GetSessionStashFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !Ref ApiId
      Name: get_session_stash_function
      DataSourceName: !Ref SessionTableDataSourceName
      FunctionVersion: 2018-05-29
      RequestMappingTemplateS3Location: vtl/get-item-where-id-stash-session-id.vm
      ResponseMappingTemplate: |
        #if($ctx.result && $ctx.result.error)
          $util.error($ctx.result.error)
        #end
        $util.qr($ctx.stash.put("session", $ctx.result))
        {}

  # UserForUser.sessions
  RelationUserForUserSessions:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: UserForUser
      FieldName: sessions
      DataSourceName: !Ref SessionTableDataSourceName
      RequestMappingTemplateS3Location: vtl/query-where-user-id-source-id.vm
      ResponseMappingTemplateS3Location: vtl/return-result-items.vm

  # SessionForUser.user
  RelationSessionForUserUser:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: SessionForUser
      FieldName: user
      DataSourceName: !Ref UserTableDataSourceName
      RequestMappingTemplateS3Location: vtl/get-item-where-id-source-user-id.vm
      ResponseMappingTemplateS3Location: vtl/return-result.vm

  # SessionForUser.players
  RelationSessionForUserPlayers:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: SessionForUser
      FieldName: players
      DataSourceName: !Ref PlayerTableDataSourceName
      RequestMappingTemplateS3Location: vtl/query-where-session-id-source-id.vm
      ResponseMappingTemplateS3Location: vtl/return-result-items.vm

  # SessionForUser.dashboards
  RelationSessionForUserDashboards:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: SessionForUser
      FieldName: dashboards
      DataSourceName: !Ref DashboardTableDataSourceName
      RequestMappingTemplateS3Location: vtl/query-where-session-id-source-id.vm
      ResponseMappingTemplateS3Location: vtl/return-result-items.vm

  # SessionForUser.sessionDataList
  RelationSessionForUserSessionDataList:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: SessionForUser
      FieldName: sessionDataList
      DataSourceName: !Ref SessionDataTableDataSourceName
      RequestMappingTemplateS3Location: vtl/query-where-session-id-source-id.vm
      ResponseMappingTemplateS3Location: vtl/return-result-items.vm

  # SessionForUser.defaultDashboard
  RelationSessionForUserDefaultDashboards:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: SessionForUser
      FieldName: defaultDashboard
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt QueryFirstDashboardFunction.FunctionId
          - !GetAtt GetDefaultDashboardFunction.FunctionId
      RequestMappingTemplate: '{}'
      ResponseMappingTemplate: |
        #if($ctx.result && $ctx.result.error)
          $util.error($ctx.result.error)
        #end
        #if($util.isNull($ctx.stash.defaultDashboard))
          $util.toJson($ctx.stash.firstDashboard)
        #else
          $util.toJson($ctx.stash.defaultDashboard)
        #end

  QueryFirstDashboardFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !Ref ApiId
      Name: query_first_dashboard_function
      DataSourceName: !Ref DashboardTableDataSourceName
      FunctionVersion: 2018-05-29
      RequestMappingTemplateS3Location: vtl/query-where-session-id-source-id.vm
      ResponseMappingTemplate: |
        #if($ctx.result && $ctx.result.error)
          $util.error($ctx.result.error)
        #end
        #set($flg = $ctx.result.items.size() > 0)
        #if($flg)
          $util.qr($ctx.stash.put("firstDashboard", $ctx.result.items[0]))
        #else
          $util.qr($ctx.stash.put("firstDashboard", null))
        #end
        {}

  GetDefaultDashboardFunction:
    Type: AWS::AppSync::FunctionConfiguration
    Properties:
      ApiId: !Ref ApiId
      Name: get_default_dashboard_function
      DataSourceName: !Ref DashboardTableDataSourceName
      FunctionVersion: 2018-05-29
      RequestMappingTemplateS3Location: vtl/get-item-where-id-source-default-dashboard-id.vm
      ResponseMappingTemplate: |
        #if($ctx.result && $ctx.result.error)
          $util.error($ctx.result.error)
        #end
        #if($util.isNull($ctx.result))
          $util.qr($ctx.stash.put("defaultDashboard", null))
        #else
          $util.qr($ctx.stash.put("defaultDashboard", $ctx.result))
        #end
        {}

  # SessionForPlayer.user
  RelationSessionForPlayerUser:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: SessionForPlayer
      FieldName: user
      DataSourceName: !Ref UserTableDataSourceName
      RequestMappingTemplateS3Location: vtl/get-item-where-id-source-user-id.vm
      ResponseMappingTemplateS3Location: vtl/return-result.vm

  # SessionForPlayer.players
  RelationSessionForPlayerPlayers:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: SessionForPlayer
      FieldName: players
      DataSourceName: !Ref PlayerTableDataSourceName
      RequestMappingTemplateS3Location: vtl/query-where-session-id-source-id.vm
      ResponseMappingTemplateS3Location: vtl/return-result-items.vm

  # SessionForPlayer.dashboards
  RelationSessionForPlayerDashboards:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: SessionForPlayer
      FieldName: dashboards
      DataSourceName: !Ref DashboardTableDataSourceName
      RequestMappingTemplateS3Location: vtl/query-where-session-id-source-id.vm
      ResponseMappingTemplateS3Location: vtl/return-result-items.vm

  # SessionForPlayer.defaultDashboard
  RelationSessionForPlayerDefaultDashboards:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: SessionForPlayer
      FieldName: defaultDashboard
      Kind: PIPELINE
      PipelineConfig:
        Functions:
          - !GetAtt QueryFirstDashboardFunction.FunctionId
          - !GetAtt GetDefaultDashboardFunction.FunctionId
      RequestMappingTemplate: '{}'
      ResponseMappingTemplate: |
        #if($ctx.result && $ctx.result.error)
          $util.error($ctx.result.error)
        #end
        #if($util.isNull($ctx.stash.defaultDashboard))
          $util.toJson($ctx.stash.firstDashboard)
        #else
          $util.toJson($ctx.stash.defaultDashboard)
        #end

  # SessionForPlayer.sessionDataList
  RelationSessionForPlayerSessionDataList:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: SessionForPlayer
      FieldName: sessionDataList
      DataSourceName: !Ref SessionDataTableDataSourceName
      RequestMappingTemplateS3Location: vtl/query-where-session-id-source-id.vm
      ResponseMappingTemplateS3Location: vtl/return-result-items.vm

  # PlayerForPlayer.session
  RelationPlayerForPlayerSession:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: PlayerForPlayer
      FieldName: session
      DataSourceName: !Ref SessionTableDataSourceName
      RequestMappingTemplateS3Location: vtl/get-item-where-id-source-session-id.vm
      ResponseMappingTemplateS3Location: vtl/return-result.vm
